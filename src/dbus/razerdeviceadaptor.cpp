/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp razerdevice.xml -a razerdeviceadaptor.h:razerdeviceadaptor.cpp -c RazerDeviceAdaptor
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "razerdeviceadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class RazerDeviceAdaptor
 */

RazerDeviceAdaptor::RazerDeviceAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

RazerDeviceAdaptor::~RazerDeviceAdaptor()
{
    // destructor
}

QVector<RazerLedId> RazerDeviceAdaptor::ledIds() const
{
    // get the value of property LedIds
    return qvariant_cast< QVector<RazerLedId> >(parent()->property("LedIds"));
}

QString RazerDeviceAdaptor::name() const
{
    // get the value of property Name
    return qvariant_cast< QString >(parent()->property("Name"));
}

QStringList RazerDeviceAdaptor::supportedFeatures() const
{
    // get the value of property SupportedFeatures
    return qvariant_cast< QStringList >(parent()->property("SupportedFeatures"));
}

QStringList RazerDeviceAdaptor::supportedFx() const
{
    // get the value of property SupportedFx
    return qvariant_cast< QStringList >(parent()->property("SupportedFx"));
}

QString RazerDeviceAdaptor::type() const
{
    // get the value of property Type
    return qvariant_cast< QString >(parent()->property("Type"));
}

bool RazerDeviceAdaptor::defineCustomFrame(uchar row, uchar startColumn, uchar endColumn, const QByteArray &rgbData)
{
    // handle method call io.github.openrazer1.Device.defineCustomFrame
    bool out0;
    QMetaObject::invokeMethod(parent(), "defineCustomFrame", Q_RETURN_ARG(bool, out0), Q_ARG(uchar, row), Q_ARG(uchar, startColumn), Q_ARG(uchar, endColumn), Q_ARG(QByteArray, rgbData));
    return out0;
}

bool RazerDeviceAdaptor::displayCustomFrame()
{
    // handle method call io.github.openrazer1.Device.displayCustomFrame
    bool out0;
    QMetaObject::invokeMethod(parent(), "displayCustomFrame", Q_RETURN_ARG(bool, out0));
    return out0;
}

uchar RazerDeviceAdaptor::getBrightness(RazerLedId led)
{
    // handle method call io.github.openrazer1.Device.getBrightness
    uchar out0;
    QMetaObject::invokeMethod(parent(), "getBrightness", Q_RETURN_ARG(uchar, out0), Q_ARG(RazerLedId, led));
    return out0;
}

RazerDPI RazerDeviceAdaptor::getDPI()
{
    // handle method call io.github.openrazer1.Device.getDPI
    RazerDPI out0;
    QMetaObject::invokeMethod(parent(), "getDPI", Q_RETURN_ARG(RazerDPI, out0));
    return out0;
}

QString RazerDeviceAdaptor::getFirmwareVersion()
{
    // handle method call io.github.openrazer1.Device.getFirmwareVersion
    QString out0;
    QMetaObject::invokeMethod(parent(), "getFirmwareVersion", Q_RETURN_ARG(QString, out0));
    return out0;
}

QString RazerDeviceAdaptor::getKeyboardLayout()
{
    // handle method call io.github.openrazer1.Device.getKeyboardLayout
    QString out0;
    QMetaObject::invokeMethod(parent(), "getKeyboardLayout", Q_RETURN_ARG(QString, out0));
    return out0;
}

ushort RazerDeviceAdaptor::getPollRate()
{
    // handle method call io.github.openrazer1.Device.getPollRate
    ushort out0;
    QMetaObject::invokeMethod(parent(), "getPollRate", Q_RETURN_ARG(ushort, out0));
    return out0;
}

QString RazerDeviceAdaptor::getSerial()
{
    // handle method call io.github.openrazer1.Device.getSerial
    QString out0;
    QMetaObject::invokeMethod(parent(), "getSerial", Q_RETURN_ARG(QString, out0));
    return out0;
}

void RazerDeviceAdaptor::pauseCustomEffectThread()
{
    // handle method call io.github.openrazer1.Device.pauseCustomEffectThread
    QMetaObject::invokeMethod(parent(), "pauseCustomEffectThread");
}

bool RazerDeviceAdaptor::setBlinking(RazerLedId led, uchar red, uchar green, uchar blue)
{
    // handle method call io.github.openrazer1.Device.setBlinking
    bool out0;
    QMetaObject::invokeMethod(parent(), "setBlinking", Q_RETURN_ARG(bool, out0), Q_ARG(RazerLedId, led), Q_ARG(uchar, red), Q_ARG(uchar, green), Q_ARG(uchar, blue));
    return out0;
}

bool RazerDeviceAdaptor::setBreathing(RazerLedId led, uchar red, uchar green, uchar blue)
{
    // handle method call io.github.openrazer1.Device.setBreathing
    bool out0;
    QMetaObject::invokeMethod(parent(), "setBreathing", Q_RETURN_ARG(bool, out0), Q_ARG(RazerLedId, led), Q_ARG(uchar, red), Q_ARG(uchar, green), Q_ARG(uchar, blue));
    return out0;
}

bool RazerDeviceAdaptor::setBreathingDual(RazerLedId led, uchar red, uchar green, uchar blue, uchar red2, uchar green2, uchar blue2)
{
    // handle method call io.github.openrazer1.Device.setBreathingDual
    bool out0;
    QMetaObject::invokeMethod(parent(), "setBreathingDual", Q_RETURN_ARG(bool, out0), Q_ARG(RazerLedId, led), Q_ARG(uchar, red), Q_ARG(uchar, green), Q_ARG(uchar, blue), Q_ARG(uchar, red2), Q_ARG(uchar, green2), Q_ARG(uchar, blue2));
    return out0;
}

bool RazerDeviceAdaptor::setBreathingRandom(RazerLedId led)
{
    // handle method call io.github.openrazer1.Device.setBreathingRandom
    bool out0;
    QMetaObject::invokeMethod(parent(), "setBreathingRandom", Q_RETURN_ARG(bool, out0), Q_ARG(RazerLedId, led));
    return out0;
}

bool RazerDeviceAdaptor::setBrightness(RazerLedId led, uchar brightness)
{
    // handle method call io.github.openrazer1.Device.setBrightness
    bool out0;
    QMetaObject::invokeMethod(parent(), "setBrightness", Q_RETURN_ARG(bool, out0), Q_ARG(RazerLedId, led), Q_ARG(uchar, brightness));
    return out0;
}

bool RazerDeviceAdaptor::setDPI(RazerDPI dpi)
{
    // handle method call io.github.openrazer1.Device.setDPI
    bool out0;
    QMetaObject::invokeMethod(parent(), "setDPI", Q_RETURN_ARG(bool, out0), Q_ARG(RazerDPI, dpi));
    return out0;
}

bool RazerDeviceAdaptor::setNone(RazerLedId led)
{
    // handle method call io.github.openrazer1.Device.setNone
    bool out0;
    QMetaObject::invokeMethod(parent(), "setNone", Q_RETURN_ARG(bool, out0), Q_ARG(RazerLedId, led));
    return out0;
}

bool RazerDeviceAdaptor::setPollRate(ushort poll_rate)
{
    // handle method call io.github.openrazer1.Device.setPollRate
    bool out0;
    QMetaObject::invokeMethod(parent(), "setPollRate", Q_RETURN_ARG(bool, out0), Q_ARG(ushort, poll_rate));
    return out0;
}

bool RazerDeviceAdaptor::setReactive(RazerLedId led, ReactiveSpeed speed, uchar red, uchar green, uchar blue)
{
    // handle method call io.github.openrazer1.Device.setReactive
    bool out0;
    QMetaObject::invokeMethod(parent(), "setReactive", Q_RETURN_ARG(bool, out0), Q_ARG(RazerLedId, led), Q_ARG(ReactiveSpeed, speed), Q_ARG(uchar, red), Q_ARG(uchar, green), Q_ARG(uchar, blue));
    return out0;
}

bool RazerDeviceAdaptor::setSpectrum(RazerLedId led)
{
    // handle method call io.github.openrazer1.Device.setSpectrum
    bool out0;
    QMetaObject::invokeMethod(parent(), "setSpectrum", Q_RETURN_ARG(bool, out0), Q_ARG(RazerLedId, led));
    return out0;
}

bool RazerDeviceAdaptor::setStatic(RazerLedId led, uchar red, uchar green, uchar blue)
{
    // handle method call io.github.openrazer1.Device.setStatic
    bool out0;
    QMetaObject::invokeMethod(parent(), "setStatic", Q_RETURN_ARG(bool, out0), Q_ARG(RazerLedId, led), Q_ARG(uchar, red), Q_ARG(uchar, green), Q_ARG(uchar, blue));
    return out0;
}

bool RazerDeviceAdaptor::setWave(RazerLedId led, WaveDirection direction)
{
    // handle method call io.github.openrazer1.Device.setWave
    bool out0;
    QMetaObject::invokeMethod(parent(), "setWave", Q_RETURN_ARG(bool, out0), Q_ARG(RazerLedId, led), Q_ARG(WaveDirection, direction));
    return out0;
}

bool RazerDeviceAdaptor::startCustomEffectThread(const QString &effectName)
{
    // handle method call io.github.openrazer1.Device.startCustomEffectThread
    bool out0;
    QMetaObject::invokeMethod(parent(), "startCustomEffectThread", Q_RETURN_ARG(bool, out0), Q_ARG(QString, effectName));
    return out0;
}

